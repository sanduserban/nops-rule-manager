---!
    import addict
    class CLS:
        th = "px-2 py-3 md:px-6 md:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"

        def tag(color, size="xs"):
            return f"px-2 my-1 inline-flex text-{size} leading-5 font-semibold rounded-full bg-{color}-100 text-{color}-800 transition hover:bg-{color}-200 hover:text-{color}-900 hover:shadow cursor-pointer"

    DATA = {"aws": {"check_ec2_autoscaling": {"breadcrumbTitle": "EC2 Autoscaling", "description": "Consider leveraging autoscaling for high availability and lower cost", "name": "Autoscaling disabled for EC2 instances\"", "pillar": "Reliability", "service": "ec2", "tags": ["AWS", "FTR", "WAFR"], "title": "Resources are part of autoscaling groups"}, "ec2_low_network_utilization": {"breadcrumbTitle": "EC2 low network traffic", "description": "Some description", "name": "EC2 low network traffic details", "pillar": "Cost", "service": "ec2", "tags": ["AWS", "FTR", "WAFR"], "title": "EC2 Low Network Traffic details"}, "rds_instances_without_multiaz": {"breadcrumbTitle": "EC2 Autoscaling", "description": "RDS instances are enabled for Multi-AZ. It provides high availability to quickly and automatically recover from infrastructure failures.", "name": "Enable Multi-AZ for RDS", "pillar": "Reliability", "service": "rds", "tags": ["AWS", "FTR", "WAFR"], "title": "Resources are part of autoscaling groups"} }, "gcp": {"some_gcp_rule": {"breadcrumbTitle": "gcp breadcrump", "description": "gcp description", "name": "gcp", "pillar": "Reliability", "service": "gcp_service", "tags": ["GCP"], "title": "GCP Title"} } }


    def data(context):
        return addict.Dict(context.get("data") or DATA)

-def row(data, id)
    tr
        td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap
            .flex.flex-col.max-w-[200px].${'md:max-w-max'}
                .text-sm.font-medium.text-gray-900.whitespace-pre-wrap.mb-1
                    | ${data.name}
                .text-sm.text-gray-500.whitespace-pre-wrap
                    | ${data.description}
        td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.max-w-[200px].${'md:max-w-max'}
            .text-sm.text-gray-900.whitespace-pre-wrap.mb-1 ${data.title}
            .text-sm.text-gray-500.whitespace-pre-wrap ${data.pillar}
        td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.flex.flex-wrap.max-w-[150px]
            -for tag in data.tags
                button.${CLS.tag("green" if tag == "AWS" else "red")} hx-get="/filter?id=${id}&tag=${tag}" hx-target="#${id}" hx-swap="outerHTML"
                    | ${tag}

        td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.text-sm.text-gray-500.max-w-[120px]
            | ${data.service}

        td.px-2.py-1.${'md:px-6'}.${'md:py-4'}.whitespace-nowrap.flex.flex-wrap.max-w-[150px]
            -for c in data.compliance
                button.${CLS.tag("magenta")} hx-get="/filter?id=${id}&tag=${tag}" hx-target="#${id}" hx-swap="outerHTML"
                    | ${c}


-def table(id, tag='')
    #${id}
        .${'hidden' if not tag else 'flex-center'}
            h6.text-mauve-gray Showing rules with tag
            button.ml-2.${CLS.tag("green" if tag == "AWS" else "red")} hx-get="/filter?id=${id}" hx-target="#${id}" hx-swap="outerHTML"
                | ${tag} &nbsp;`b.text-black ï¼¸`
        table.divide-y.divide-gray-200.w-full
            thead.bg-gray-50
                tr
                    th.${CLS.th} scope="col" Name
                    th.${CLS.th} scope="col" Title
                    th.${CLS.th} scope="col" Tags
                    th.${CLS.th} scope="col" Service
                    th.${CLS.th} scope="col" Helps with Compliance
            tbody.bg-white.divide-y.divide-gray-200
                -for key, value in data(context)[id].items()
                    -call id="${id}" data=${value} self:row
